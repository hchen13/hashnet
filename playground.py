import base64
from io import BytesIO

from PIL import Image

from db import DBManager
from settings import db_params
from utils import load_base64, display_image


def b64encode(image_path):
    with open(image_path, 'rb') as fin:
        data = fin.read()
    return base64.b64encode(data)


if __name__ == '__main__':
    # db = DBManager(**db_params)
    # images = db.list_images()
    # for i in images:
    #     print(i.path)
    path = "/Users/ethan/Pictures/datasets/USA/the white house/158.jpg"
    base64 = b64encode(path)
    # base64 = ""
    image = load_base64(base64)
    print(base64)
    display_image(image)

    # storage = Storage(**oss_params)
    # db = DBManager(**db_params)
    # session = db.Session()
    # cnt = 0
    # add_list = []
    # for obj in oss2.ObjectIterator(storage.bucket, prefix='ethan/USA/'):
    #     if not obj.key.endswith('jpg'):
    #         continue
    #     print(obj.key)
    #     image = Image(path=obj.key)
    #     add_list.append(image)
    #     cnt += 1
    # session.add_all(add_list)
    # session.commit()
